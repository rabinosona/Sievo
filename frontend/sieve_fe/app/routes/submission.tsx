import type { MetaFunction } from "@remix-run/node";
import { useEffect, useState } from "react";
import { useChat } from "~/ChatContext";
import { ServiceUri } from "~/constants";
import { FeedbackHeaderStyle } from "~/styles/TextStyles";
import Feedback, { FeedbackStatus } from "~/types/Feedback";
import SubmissionTranscript from "~/components/submission/SubmissionTranscript.client";
import SubmissionResult from "~/components/submission/SubmissionResult.client";

export const meta: MetaFunction = () => {
  return [
    { title: "Submission. Results Review" },
    { name: "description", content: "meh" },
  ];
};

const mockjs: Feedback = {
  feedback:
    "To build and integrate a backend service with the rest of an ecosystem, the approach should be systematic and methodical. Here is a structured plan and some common tools that could be used:\n\n1. **Requirements Gathering:** \n   - Understand the specific functionality required from the service.\n   - Define the data flow, interfaces, and interaction between this service and other components in the ecosystem.\n\n2. **Technology Selection:**\n   - Choose a programming language based on team expertise, ecosystem compatibility, and performance needs. Common choices include Node.js, Python, Java, or Go.\n   - Select a framework that supports building web services, such as Express for Node.js, Spring Boot for Java, Django/Flask for Python, or Gin for Go.\n\n3. **API Design:**\n   - Design RESTful APIs or GraphQL depending on the use case. REST is a more common choice for traditional CRUD operations, while GraphQL can be more efficient for complex querying.\n   - Use tools like Swagger or Postman to design and document the API.\n\n4. **Database Integration:**\n   - Choose a database based on the type of data (relational or non-relational) and scale: SQL options like PostgreSQL/MySQL or NoSQL options like MongoDB.\n   - Utilize ORMs (e.g., Sequelize for Node.js, Hibernate for Java) for database interaction, to simplify complex queries and data manipulation.\n\n5. **Microservices Architecture (if applicable):**\n   - Consider breaking down the service into microservices if it's large or needs to scale independently.\n   - Implement communication between services using HTTP/REST, gRPC, or message brokers like Kafka or RabbitMQ.\n\n6. **Security Measures:**\n   - Implement authentication and authorization (e.g., JWT, OAuth).\n   - Secure data in transit with HTTPS and secure data at rest in the database.\n\n7. **Deployment and integration:**\n   - Containerize the application using Docker for consistency across different environments.\n   - Use orchestration tools like Kubernetes for managing containerized applications.\n   - Set up CI/CD pipelines using tools like Jenkins, Travis CI, or GitHub Actions for automated testing and deployment.\n\n8. **Monitoring and Logging:**\n   - Implement logging using tools like Log4j, Winston, or ELK Stack (Elasticsearch, Logstash, Kibana) for centralized logging.\n   - Use monitoring tools like Prometheus, Grafana, or New Relic to keep track of application performance and availability.\n\n9. **Testing:**\n   - Write unit, integration, and end-to-end tests. Use frameworks like Jest, Mocha for Node.js, JUnit for Java, or PyTest for Python.\n\nThe candidate's approach might vary based on specific requirements and expertise. Being adept in evaluating trade-offs between different technologies, keeping scalability, maintainability, and cost in consideration, signals a good fit for a backend engineer position. They must also be familiar with agile methodologies and collaboration tools like Jira or Trello for managing their work efficiently.\n\nBased on these considerations, you would look for comprehensive answers covering these aspects to assess their suitability for a backend engineer role.",
  conversation: [
    {
      content:
        "Let's say that you would like to build a backend service, integrating it with the rest of the ecosystem. How would you do that, and what tools would you use?",
      role: "assistant",
      audio_url: null,
    },
    {
      content: ".",
      role: "user",
      audio_url: "/media/uploads/audio_EPuETfF.webm",
    },
    {
      content:
        "Let's say that you would like to build a backend service, integrating it with the rest of the ecosystem. How would you do that, and what tools would you use?",
      role: "assistant",
      audio_url: null,
    },
    {
      content: ".",
      role: "user",
      audio_url: "/media/uploads/audio_EPuETfF.webm",
    },
    {
      content:
        "Let's say that you would like to build a backend service, integrating it with the rest of the ecosystem. How would you do that, and what tools would you use?",
      role: "assistant",
      audio_url: null,
    },
    {
      content: ".",
      role: "user",
      audio_url: "/media/uploads/audio_EPuETfF.webm",
    },
    {
      content:
        "Let's say that you would like to build a backend service, integrating it with the rest of the ecosystem. How would you do that, and what tools would you use?",
      role: "assistant",
      audio_url: null,
    },
    {
      content: ".",
      role: "user",
      audio_url: "/media/uploads/audio_EPuETfF.webm",
    },
    {
      content:
        "Let's say that you would like to build a backend service, integrating it with the rest of the ecosystem. How would you do that, and what tools would you use?",
      role: "assistant",
      audio_url: null,
    },
    {
      content: ".",
      role: "user",
      audio_url: "/media/uploads/audio_EPuETfF.webm",
    },
  ],
  email: "r@fd.com",
};

const fetchFeedbackDetails = async (
  chatId: string
): Promise<Feedback | unknown> => {
  try {
    const response = await fetch(ServiceUri + "api/submissions/", {
      method: "POST",
      body: JSON.stringify({
        chat_id: chatId,
      }),
      headers: {
        "Content-Type": "application/json",
      },
    });

    const data = await response.json();
    console.log("data received", data);
    return data; // Return the data here
  } catch (error) {
    console.error("Error:", error);
    return {} as Feedback; // Optionally return null or handle the error further
  }
};

export default function Index() {
  const chatId = useChat();
  const [feedback, setFeedback] = useState<Feedback>({});
  const [isMounted, setIsMounted] = useState(false);
  const [feedbackStatus, setFeedbackStatus] = useState<FeedbackStatus>(
    FeedbackStatus.Review
  );

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const handleChangeStyle = () => {
    if (feedbackStatus == FeedbackStatus.Review) {
      setFeedbackStatus(FeedbackStatus.Transcript);
    } else {
      setFeedbackStatus(FeedbackStatus.Review);
    }
  };

  useEffect(() => {
    const processMedia = async () => {
      if (chatId.chatId.length != 0) {
        console.log("fetching feedback");
        let feedback = await fetchFeedbackDetails(chatId.chatId);
        console.log("got feedback");
        console.log(feedback);
        if (feedback) {
          console.log("feedback received");
          setFeedback(feedback as Feedback);
        }
      }
    };

    processMedia();
  }, [chatId]);

  return (
    <div className="flex flex-col h-screen items-start justify-start bg-slate-100">
      <div className="flex flex-col h-screen items-center overflow-y-scroll">
        <div className="w-2/3 flex-grow p-4 pt-8 ">
          {isMounted && (
            <div className="flex flex-col justify-start items-start gap-8">
              <div>
                <svg
                  width="300"
                  height="36"
                  viewBox="0 0 368 48"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M10.8531 6.65045L9.26695 5.06163C5.96177 7.63981 3.34771 11.0653 1.74994 15.0124C9.79168 15.571 16.8279 19.7807 21.2122 25.9953C19.7474 18.7225 16.1721 11.9786 10.8531 6.65045ZM13.6839 3.82445L12.6917 2.83058C16.0612 1.02425 19.9112 0 24 0C28.0783 0 31.919 1.01897 35.2822 2.81662L34.2761 3.82445C29.499 8.6097 25.9945 14.428 23.98 20.7537C21.9655 14.428 18.461 8.6097 13.6839 3.82445ZM37.1069 6.65045L38.7105 5.0441C42.0256 7.6237 44.6475 11.0548 46.249 15.0097C38.191 15.5574 31.1392 19.7707 26.7478 25.9953C28.2126 18.7225 31.7879 11.9786 37.1069 6.65045ZM26 40.9902C26 29.0107 35.5568 19.2634 47.4622 18.9565C47.8145 20.5955 48 22.2966 48 24.0411C48 36.644 38.3191 46.982 26 48V40.9902ZM21.96 40.9902V47.9967C9.65999 46.9596 0 36.6304 0 24.0411C0 22.297 0.185416 20.5962 0.537578 18.9575C12.4245 19.2852 21.96 29.0241 21.96 40.9902Z"
                    fill="#C4C3D4"
                  />
                  <path
                    d="M72.5438 38.48C70.5171 38.48 68.7038 38.1333 67.1038 37.44C65.5304 36.7467 64.2771 35.7333 63.3438 34.4C62.4371 33.0667 61.9704 31.4533 61.9438 29.56H67.6638C67.6904 30.3867 67.9038 31.1333 68.3038 31.8C68.7038 32.4667 69.2504 33 69.9438 33.4C70.6638 33.7733 71.5171 33.96 72.5038 33.96C73.3571 33.96 74.0904 33.8267 74.7038 33.56C75.3438 33.2667 75.8371 32.8667 76.1838 32.36C76.5304 31.8533 76.7038 31.2533 76.7038 30.56C76.7038 29.76 76.5038 29.0933 76.1038 28.56C75.7304 28.0267 75.1971 27.5733 74.5038 27.2C73.8371 26.8267 73.0504 26.4933 72.1438 26.2C71.2638 25.88 70.3304 25.5467 69.3438 25.2C67.1304 24.48 65.4371 23.52 64.2638 22.32C63.1171 21.12 62.5438 19.5333 62.5438 17.56C62.5438 15.88 62.9438 14.44 63.7438 13.24C64.5704 12.04 65.7038 11.12 67.1438 10.48C68.5838 9.84 70.2238 9.52 72.0638 9.52C73.9571 9.52 75.6104 9.85333 77.0238 10.52C78.4638 11.16 79.5971 12.0933 80.4238 13.32C81.2771 14.5467 81.7171 15.9867 81.7438 17.64H75.9838C75.9571 17.0267 75.7704 16.4533 75.4238 15.92C75.1038 15.36 74.6504 14.92 74.0638 14.6C73.4771 14.2533 72.7838 14.08 71.9838 14.08C71.2904 14.0533 70.6504 14.16 70.0638 14.4C69.5038 14.64 69.0504 15 68.7038 15.48C68.3838 15.9333 68.2238 16.5067 68.2238 17.2C68.2238 17.8667 68.3838 18.4267 68.7038 18.88C69.0504 19.3333 69.5171 19.7333 70.1038 20.08C70.6904 20.4 71.3838 20.7067 72.1838 21C72.9838 21.2667 73.8504 21.5467 74.7838 21.84C76.1704 22.32 77.4504 22.8933 78.6238 23.56C79.7971 24.2 80.7304 25.04 81.4238 26.08C82.1171 27.12 82.4638 28.4933 82.4638 30.2C82.4638 31.6667 82.0771 33.0267 81.3038 34.28C80.5304 35.5333 79.4104 36.5467 77.9438 37.32C76.5038 38.0933 74.7038 38.48 72.5438 38.48ZM84.2444 38V17.84H89.6444V38H84.2444ZM86.9644 15.08C86.0044 15.08 85.2044 14.8 84.5644 14.24C83.951 13.6533 83.6444 12.92 83.6444 12.04C83.6444 11.16 83.951 10.44 84.5644 9.88C85.2044 9.29333 86.0044 9 86.9644 9C87.951 9 88.751 9.29333 89.3644 9.88C90.0044 10.44 90.3244 11.16 90.3244 12.04C90.3244 12.92 90.0044 13.6533 89.3644 14.24C88.751 14.8 87.951 15.08 86.9644 15.08ZM101.981 38.48C99.9543 38.48 98.1543 38.0533 96.5809 37.2C95.0343 36.32 93.8209 35.1067 92.9409 33.56C92.0876 31.9867 91.6609 30.1733 91.6609 28.12C91.6609 26.0133 92.0876 24.16 92.9409 22.56C93.8209 20.9333 95.0343 19.6667 96.5809 18.76C98.1276 17.8267 99.9276 17.36 101.981 17.36C103.981 17.36 105.728 17.8 107.221 18.68C108.714 19.56 109.874 20.7467 110.701 22.24C111.528 23.7333 111.941 25.4267 111.941 27.32C111.941 27.5867 111.941 27.8933 111.941 28.24C111.941 28.56 111.914 28.8933 111.861 29.24H95.5009V25.96H106.501C106.421 24.6533 105.954 23.6267 105.101 22.88C104.274 22.1333 103.234 21.76 101.981 21.76C101.074 21.76 100.234 21.9733 99.4609 22.4C98.6876 22.8 98.0743 23.4267 97.6209 24.28C97.1943 25.1333 96.9809 26.2133 96.9809 27.52V28.68C96.9809 29.7733 97.1809 30.7333 97.5809 31.56C98.0076 32.36 98.5943 32.9867 99.3409 33.44C100.088 33.8667 100.954 34.08 101.941 34.08C102.928 34.08 103.741 33.8667 104.381 33.44C105.048 33.0133 105.541 32.4667 105.861 31.8H111.381C111.008 33.0533 110.381 34.1867 109.501 35.2C108.621 36.2133 107.541 37.0133 106.261 37.6C104.981 38.1867 103.554 38.48 101.981 38.48ZM118.182 38L110.782 17.84H116.462L121.462 32.92L126.462 17.84H132.102L124.742 38H118.182ZM141.182 38.48C139.262 38.48 137.529 38.04 135.982 37.16C134.462 36.2533 133.249 35.0133 132.342 33.44C131.462 31.84 131.022 30.0133 131.022 27.96C131.022 25.8533 131.462 24.0133 132.342 22.44C133.249 20.84 134.475 19.6 136.022 18.72C137.569 17.8133 139.302 17.36 141.222 17.36C143.169 17.36 144.902 17.8133 146.422 18.72C147.969 19.6 149.182 20.84 150.062 22.44C150.969 24.0133 151.422 25.84 151.422 27.92C151.422 30 150.969 31.84 150.062 33.44C149.182 35.0133 147.969 36.2533 146.422 37.16C144.875 38.04 143.129 38.48 141.182 38.48ZM141.182 33.8C142.089 33.8 142.889 33.5867 143.582 33.16C144.302 32.7333 144.862 32.08 145.262 31.2C145.689 30.32 145.902 29.2267 145.902 27.92C145.902 26.6133 145.689 25.5333 145.262 24.68C144.862 23.8 144.302 23.1467 143.582 22.72C142.889 22.2667 142.102 22.04 141.222 22.04C140.369 22.04 139.582 22.2667 138.862 22.72C138.142 23.1467 137.569 23.8 137.142 24.68C136.742 25.5333 136.542 26.6133 136.542 27.92C136.542 29.2267 136.742 30.32 137.142 31.2C137.569 32.08 138.129 32.7333 138.822 33.16C139.542 33.5867 140.329 33.8 141.182 33.8ZM160.01 38V10H170.45C172.717 10 174.583 10.3867 176.05 11.16C177.517 11.9333 178.61 12.9733 179.33 14.28C180.05 15.56 180.41 16.9867 180.41 18.56C180.41 20.0533 180.063 21.4533 179.37 22.76C178.677 24.04 177.583 25.08 176.09 25.88C174.623 26.6533 172.73 27.04 170.41 27.04H165.41V38H160.01ZM174.53 38L168.77 25.68H174.61L180.69 38H174.53ZM165.41 23.12H170.13C171.757 23.12 172.957 22.72 173.73 21.92C174.503 21.12 174.89 20.0667 174.89 18.76C174.89 17.4533 174.503 16.4267 173.73 15.68C172.983 14.9067 171.783 14.52 170.13 14.52H165.41V23.12ZM190.793 38.48C188.767 38.48 186.967 38.0533 185.393 37.2C183.847 36.32 182.633 35.1067 181.753 33.56C180.9 31.9867 180.473 30.1733 180.473 28.12C180.473 26.0133 180.9 24.16 181.753 22.56C182.633 20.9333 183.847 19.6667 185.393 18.76C186.94 17.8267 188.74 17.36 190.793 17.36C192.793 17.36 194.54 17.8 196.033 18.68C197.527 19.56 198.687 20.7467 199.513 22.24C200.34 23.7333 200.753 25.4267 200.753 27.32C200.753 27.5867 200.753 27.8933 200.753 28.24C200.753 28.56 200.727 28.8933 200.673 29.24H184.313V25.96H195.313C195.233 24.6533 194.767 23.6267 193.913 22.88C193.087 22.1333 192.047 21.76 190.793 21.76C189.887 21.76 189.047 21.9733 188.273 22.4C187.5 22.8 186.887 23.4267 186.433 24.28C186.007 25.1333 185.793 26.2133 185.793 27.52V28.68C185.793 29.7733 185.993 30.7333 186.393 31.56C186.82 32.36 187.407 32.9867 188.153 33.44C188.9 33.8667 189.767 34.08 190.753 34.08C191.74 34.08 192.553 33.8667 193.193 33.44C193.86 33.0133 194.353 32.4667 194.673 31.8H200.193C199.82 33.0533 199.193 34.1867 198.313 35.2C197.433 36.2133 196.353 37.0133 195.073 37.6C193.793 38.1867 192.367 38.48 190.793 38.48ZM202.376 46.8V17.84H207.176L207.776 20.64C208.203 20.0533 208.709 19.52 209.296 19.04C209.883 18.5333 210.576 18.1333 211.376 17.84C212.203 17.52 213.163 17.36 214.256 17.36C216.149 17.36 217.816 17.8267 219.256 18.76C220.696 19.6933 221.829 20.96 222.656 22.56C223.509 24.1333 223.936 25.9333 223.936 27.96C223.936 29.9867 223.509 31.8 222.656 33.4C221.803 34.9733 220.656 36.2133 219.216 37.12C217.776 38.0267 216.136 38.48 214.296 38.48C212.803 38.48 211.509 38.2133 210.416 37.68C209.349 37.12 208.469 36.36 207.776 35.4V46.8H202.376ZM213.016 33.76C214.083 33.76 215.016 33.52 215.816 33.04C216.643 32.56 217.283 31.88 217.736 31C218.189 30.12 218.416 29.1067 218.416 27.96C218.416 26.8133 218.189 25.8 217.736 24.92C217.283 24.0133 216.643 23.32 215.816 22.84C215.016 22.3333 214.083 22.08 213.016 22.08C211.976 22.08 211.043 22.3333 210.216 22.84C209.416 23.32 208.776 24 208.296 24.88C207.843 25.76 207.616 26.7733 207.616 27.92C207.616 29.0667 207.843 30.0933 208.296 31C208.776 31.88 209.416 32.56 210.216 33.04C211.043 33.52 211.976 33.76 213.016 33.76ZM235.307 38.48C233.387 38.48 231.654 38.04 230.107 37.16C228.587 36.2533 227.374 35.0133 226.467 33.44C225.587 31.84 225.147 30.0133 225.147 27.96C225.147 25.8533 225.587 24.0133 226.467 22.44C227.374 20.84 228.6 19.6 230.147 18.72C231.694 17.8133 233.427 17.36 235.347 17.36C237.294 17.36 239.027 17.8133 240.547 18.72C242.094 19.6 243.307 20.84 244.187 22.44C245.094 24.0133 245.547 25.84 245.547 27.92C245.547 30 245.094 31.84 244.187 33.44C243.307 35.0133 242.094 36.2533 240.547 37.16C239 38.04 237.254 38.48 235.307 38.48ZM235.307 33.8C236.214 33.8 237.014 33.5867 237.707 33.16C238.427 32.7333 238.987 32.08 239.387 31.2C239.814 30.32 240.027 29.2267 240.027 27.92C240.027 26.6133 239.814 25.5333 239.387 24.68C238.987 23.8 238.427 23.1467 237.707 22.72C237.014 22.2667 236.227 22.04 235.347 22.04C234.494 22.04 233.707 22.2667 232.987 22.72C232.267 23.1467 231.694 23.8 231.267 24.68C230.867 25.5333 230.667 26.6133 230.667 27.92C230.667 29.2267 230.867 30.32 231.267 31.2C231.694 32.08 232.254 32.7333 232.947 33.16C233.667 33.5867 234.454 33.8 235.307 33.8ZM247.401 38V17.84H252.201L252.721 21.56C253.201 20.68 253.801 19.9333 254.521 19.32C255.268 18.7067 256.108 18.2267 257.041 17.88C258.001 17.5333 259.054 17.36 260.201 17.36V23.08H258.361C257.561 23.08 256.814 23.1733 256.121 23.36C255.454 23.5467 254.868 23.8533 254.361 24.28C253.854 24.68 253.468 25.24 253.201 25.96C252.934 26.68 252.801 27.5867 252.801 28.68V38H247.401ZM270.048 38C268.635 38 267.395 37.7867 266.328 37.36C265.288 36.9067 264.475 36.1733 263.888 35.16C263.301 34.12 263.008 32.7067 263.008 30.92V22.36H259.568V17.84H263.008L263.608 12.36H268.408V17.84H273.728V22.36H268.408V31C268.408 31.9067 268.608 32.5333 269.008 32.88C269.408 33.2267 270.088 33.4 271.048 33.4H273.688V38H270.048ZM283.713 38.48C281.873 38.48 280.273 38.1867 278.913 37.6C277.553 37.0133 276.486 36.2 275.713 35.16C274.939 34.12 274.499 32.9467 274.393 31.64H279.753C279.886 32.1467 280.113 32.6133 280.433 33.04C280.753 33.44 281.179 33.76 281.713 34C282.246 34.24 282.886 34.36 283.633 34.36C284.353 34.36 284.939 34.2667 285.393 34.08C285.846 33.8667 286.179 33.5867 286.393 33.24C286.633 32.8933 286.753 32.5333 286.753 32.16C286.753 31.6 286.593 31.1733 286.273 30.88C285.953 30.56 285.486 30.3067 284.873 30.12C284.259 29.9333 283.513 29.7467 282.633 29.56C281.673 29.3733 280.726 29.1467 279.793 28.88C278.886 28.5867 278.073 28.2267 277.353 27.8C276.633 27.3733 276.059 26.8267 275.633 26.16C275.206 25.4933 274.993 24.6667 274.993 23.68C274.993 22.48 275.313 21.4133 275.953 20.48C276.593 19.52 277.526 18.76 278.753 18.2C279.979 17.64 281.459 17.36 283.193 17.36C285.619 17.36 287.539 17.9067 288.953 19C290.366 20.0933 291.206 21.6 291.473 23.52H286.393C286.233 22.9067 285.873 22.4267 285.313 22.08C284.779 21.7067 284.059 21.52 283.153 21.52C282.193 21.52 281.459 21.6933 280.953 22.04C280.446 22.3867 280.193 22.84 280.193 23.4C280.193 23.7733 280.353 24.1067 280.673 24.4C281.019 24.6933 281.499 24.9467 282.113 25.16C282.726 25.3467 283.473 25.5333 284.353 25.72C285.899 26.04 287.259 26.4133 288.433 26.84C289.606 27.24 290.526 27.8267 291.193 28.6C291.859 29.3467 292.193 30.44 292.193 31.88C292.193 33.16 291.846 34.3067 291.153 35.32C290.459 36.3067 289.473 37.08 288.193 37.64C286.939 38.2 285.446 38.48 283.713 38.48ZM301.016 38V10H309.616C311.616 10 313.243 10.32 314.496 10.96C315.749 11.6 316.669 12.4533 317.256 13.52C317.869 14.56 318.176 15.72 318.176 17C318.176 18.4667 317.856 19.68 317.216 20.64C316.603 21.6 315.803 22.3333 314.816 22.84C313.829 23.3467 312.803 23.68 311.736 23.84L311.976 23.44C313.149 23.4667 314.256 23.7867 315.296 24.4C316.336 25.0133 317.176 25.84 317.816 26.88C318.483 27.8933 318.816 29.0533 318.816 30.36C318.816 31.72 318.509 32.9867 317.896 34.16C317.283 35.3067 316.323 36.24 315.016 36.96C313.709 37.6533 311.989 38 309.856 38H301.016ZM302.816 36.4H309.936C312.149 36.4 313.869 35.8667 315.096 34.8C316.323 33.7333 316.936 32.24 316.936 30.32C316.936 28.5333 316.283 27.0933 314.976 26C313.696 24.88 311.963 24.32 309.776 24.32H302.816V36.4ZM302.816 22.76H309.856C311.909 22.76 313.496 22.2533 314.616 21.24C315.736 20.2 316.296 18.8267 316.296 17.12C316.296 15.4933 315.723 14.16 314.576 13.12C313.456 12.08 311.843 11.56 309.736 11.56H302.816V22.76ZM329.107 38.48C327.214 38.48 325.574 38.04 324.187 37.16C322.827 36.28 321.774 35.04 321.027 33.44C320.281 31.84 319.907 29.96 319.907 27.8C319.907 25.6133 320.294 23.7467 321.067 22.2C321.867 20.6533 322.961 19.4667 324.347 18.64C325.761 17.7867 327.374 17.36 329.187 17.36C331.134 17.36 332.761 17.8 334.067 18.68C335.374 19.5333 336.361 20.6667 337.027 22.08C337.694 23.4933 338.027 25.04 338.027 26.72C338.027 26.9867 338.027 27.24 338.027 27.48C338.027 27.72 338.014 28 337.987 28.32H321.187V26.76H336.267C336.241 24.1733 335.561 22.2267 334.227 20.92C332.894 19.6133 331.187 18.96 329.107 18.96C327.827 18.96 326.627 19.2533 325.507 19.84C324.387 20.4267 323.467 21.3333 322.747 22.56C322.054 23.7867 321.707 25.3467 321.707 27.24V27.96C321.707 29.9867 322.054 31.6667 322.747 33C323.441 34.3067 324.347 35.28 325.467 35.92C326.587 36.56 327.801 36.88 329.107 36.88C330.787 36.88 332.174 36.4933 333.267 35.72C334.361 34.92 335.161 33.8 335.667 32.36H337.467C337.121 33.5333 336.574 34.5867 335.827 35.52C335.107 36.4533 334.187 37.1867 333.067 37.72C331.947 38.2267 330.627 38.48 329.107 38.48ZM345.81 38C344.743 38 343.836 37.84 343.09 37.52C342.37 37.2 341.81 36.6533 341.41 35.88C341.036 35.08 340.85 34.0133 340.85 32.68V19.4H337.33V17.84H340.85L341.13 13.44H342.65V17.84H348.97V19.4H342.65V32.64C342.65 34.0533 342.93 35.04 343.49 35.6C344.05 36.16 344.996 36.44 346.33 36.44H348.57V38H345.81ZM356.542 38.48C355.022 38.48 353.742 38.1867 352.702 37.6C351.662 37.0133 350.875 36.2533 350.342 35.32C349.809 34.36 349.542 33.3333 349.542 32.24C349.542 30.7733 349.875 29.5733 350.542 28.64C351.209 27.7067 352.142 27.0133 353.342 26.56C354.569 26.08 355.982 25.84 357.582 25.84H363.662C363.662 24.4 363.449 23.1733 363.022 22.16C362.622 21.1467 361.995 20.36 361.142 19.8C360.289 19.24 359.169 18.96 357.782 18.96C356.155 18.96 354.809 19.3467 353.742 20.12C352.702 20.8933 352.035 22.0667 351.742 23.64H349.902C350.089 22.2267 350.555 21.0667 351.302 20.16C352.075 19.2267 353.022 18.5333 354.142 18.08C355.262 17.6 356.475 17.36 357.782 17.36C359.622 17.36 361.102 17.7333 362.222 18.48C363.342 19.2 364.155 20.1867 364.662 21.44C365.195 22.6667 365.462 24.0667 365.462 25.64V38H363.862L363.662 33.96C363.449 34.3867 363.155 34.8667 362.782 35.4C362.409 35.9333 361.942 36.4267 361.382 36.88C360.822 37.3333 360.142 37.7067 359.342 38C358.569 38.32 357.635 38.48 356.542 38.48ZM356.742 36.84C357.889 36.84 358.889 36.6267 359.742 36.2C360.595 35.7467 361.315 35.16 361.902 34.44C362.489 33.6933 362.929 32.8933 363.222 32.04C363.515 31.1867 363.662 30.3467 363.662 29.52V27.4H357.702C356.129 27.4 354.889 27.6133 353.982 28.04C353.075 28.44 352.422 29 352.022 29.72C351.649 30.44 351.462 31.2667 351.462 32.2C351.462 33.0533 351.662 33.84 352.062 34.56C352.462 35.2533 353.062 35.8133 353.862 36.24C354.662 36.64 355.622 36.84 356.742 36.84Z"
                    fill="#C3C3D4"
                  />
                </svg>
              </div>
              <div className="flex flex-row gap-4">
                <div className="flex flex-grow items-center justify-center bg-white w-5/12 h-1/4 rounded-3xl">
                  <SubmissionResult
                    feedback={feedback}
                    handleChangeStyle={handleChangeStyle}
                  />
                </div>
                <div className="flex flex-grow items-center justify-center bg-white rounded-3xl w-3/4">
                  <SubmissionTranscript conversation={feedback.conversation} />
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
